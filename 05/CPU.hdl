// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // decode ------------------------------------------
    Not(in=instruction[15], out=n15);
    And(a=instruction[15], b=instruction[12], out=a);
    And(a=instruction[15], b=instruction[11], out=c1);
    And(a=instruction[15], b=instruction[10], out=c2);
    And(a=instruction[15], b=instruction[9], out=c3);
    And(a=instruction[15], b=instruction[8], out=c4);
    And(a=instruction[15], b=instruction[7], out=c5);
    And(a=instruction[15], b=instruction[6], out=c6);
    And(a=instruction[15], b=instruction[5], out=d1temp);
    Or(a=d1temp, b=n15, out=d1);

    And(a=instruction[15], b=instruction[4], out=d2);
    And(a=instruction[15], b=instruction[3], out=d3);
    And(a=instruction[15], b=instruction[2], out=j1);
    And(a=instruction[15], b=instruction[1], out=j2);
    And(a=instruction[15], b=instruction[0], out=j3);

    // Aregister ------------------------------------------
    Mux16(a=instruction[0..15], b=oM, sel=instruction[15], out=mux1);
    ARegister(in=mux1, load=d1, out=A);
    Mux16(a=A, b=inM, sel=a, out=AM);

    // ALU ------------------------------------------
    ALU(x=D, y=AM, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=oM, zr=zr, ng=ng);

    And16(a=A, b=A, out[15]=temp, out[0..14]=addressM);

    // Dregister ------------------------------------------
    DRegister(in=oM, load=d2, out=D);

    // Out M ------------------------------------------
    And16(a=oM, b=oM, out=outM);

    // PC ------------------------------------------
    Or(a=zr, b=ng, out=nonpositive);
    Not(in=nonpositive, out=positive);

    // jump or not
    And(a=zr, b=j2, out=jmp2);
    And(a=ng, b=j1, out=jmp1);
    And(a=positive, b=j3, out=jmp3);

    Or(a=jmp2, b=jmp1, out=jmp12);
    Or(a=jmp12, b=jmp3, out=jmp123);

    // count up or not (inc)
    Not(in=jmp123, out=inc);

    PC(in=A, load=jmp123, reset=reset, inc=inc, out[0..14]=pc, out[15]=temp2);
    
    // writeM ------------------------------------------
    And(a=d3, b=d3, out=writeM);

}